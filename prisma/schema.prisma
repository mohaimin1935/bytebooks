generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid()) @map("_id")
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           String?
  accounts       Account[]
  sessions       Session[]

  BookCreator BookCreator[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Author {
  id   String @id @default(cuid()) @map("_id")
  name String
  

  books BookAuthor[]
}

model Tag {
  id    String @id @default(cuid()) @map("_id")
  title String

  books BookTag[]
}

model Genre {
  id    String @id @default(cuid()) @map("_id")
  title String

  books BookGenre[]
}

model BookInfo {
  id             String   @id @default(cuid()) @map("_id")
  isbn           String?
  publishingYear Int?
  title          String
  image          String?
  briefDesc      String?
  authorIds      String[]
  tagIds         String[]
  genreIds       String[]

  authors  BookAuthor[]
  tags     BookTag[]
  genres   BookGenre[]
  creators BookCreator[]
}

model BookAuthor {
  id String @id @default(cuid()) @map("_id")

  book     BookInfo @relation(fields: [bookId], references: [id])
  bookId   String
  author   Author   @relation(fields: [authorId], references: [id])
  authorId String
}

model BookCreator {
  id String @id @default(cuid()) @map("_id")

  book      BookInfo @relation(fields: [bookId], references: [id])
  bookId    String
  creator   User     @relation(fields: [creatorId], references: [id])
  creatorId String
}

model BookTag {
  id String @id @default(cuid()) @map("_id")

  book   BookInfo @relation(fields: [bookId], references: [id])
  bookId String
  tag    Tag      @relation(fields: [tagId], references: [id])
  tagId  String
}

model BookGenre {
  id String @id @default(cuid()) @map("_id")

  book    BookInfo @relation(fields: [bookId], references: [id])
  bookId  String
  genre   Genre    @relation(fields: [genreId], references: [id])
  genreId String
}
