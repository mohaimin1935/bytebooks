generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid()) @map("_id")
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           String?
  lastLoginDate  DateTime?
  loginStreak    Int       @default(0)
  //need to add country and xp
  accounts       Account[]
  sessions       Session[]

  books BookCreator[]
  shelf Shelf[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  BookUser   BookUser[]
  highlights Highlights[]
  UserLogin  UserLogin[]
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Author {
  id    String  @id @default(cuid()) @map("_id")
  name  String
  desc  String?
  image String?

  books BookAuthor[]
}

model Tag {
  id   String @id @default(cuid()) @map("_id")
  name String @unique

  books BookTag[]
}

model Genre {
  id   String @id @default(cuid()) @map("_id")
  name String @unique

  books BookGenre[]
}

model BookInfo {
  id             String  @id @default(cuid()) @map("_id")
  isbn           String?
  publishingYear Int?
  title          String
  image          String?
  desc           String?
  isPublished    Boolean @default(false)

  authors  BookAuthor[]
  tags     BookTag[]
  genres   BookGenre[]
  creators BookCreator[]
  chapters Chapter[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  byte       Byte[]
  shelf      Shelf[]
  BookUser   BookUser[]
  highlights Highlights[]
}

model BookAuthor {
  id String @id @default(cuid()) @map("_id")

  book     BookInfo? @relation(fields: [bookId], references: [id])
  bookId   String?
  author   Author?   @relation(fields: [authorId], references: [id])
  authorId String?
}

model BookCreator {
  id String @id @default(cuid()) @map("_id")

  book      BookInfo @relation(fields: [bookId], references: [id])
  bookId    String
  creator   User     @relation(fields: [creatorId], references: [id])
  creatorId String
}

model BookTag {
  id String @id @default(cuid()) @map("_id")

  book   BookInfo @relation(fields: [bookId], references: [id])
  bookId String
  tag    Tag      @relation(fields: [tagId], references: [id])
  tagId  String
}

model BookGenre {
  id String @id @default(cuid()) @map("_id")

  book    BookInfo? @relation(fields: [bookId], references: [id])
  bookId  String?
  genre   Genre?    @relation(fields: [genreId], references: [id])
  genreId String?

  @@index([bookId, genreId])
}

model Chapter {
  id        String  @id @default(cuid()) @map("_id")
  title     String?
  serial    Int
  content   String?
  audioLink String?
  bookId    String
  language  String?

  book BookInfo @relation(fields: [bookId], references: [id], onDelete: Cascade)

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  BookUser   BookUser[]
  highlights Highlights[]
}

model Byte {
  id        String  @id @default(cuid()) @map("_id")
  title     String?
  serial    Int
  content   String?
  audioLink String?
  bookId    String
  language  String?

  book BookInfo @relation(fields: [bookId], references: [id], onDelete: Cascade)

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  BookUser   BookUser[]
  highlights Highlights[]
}

model Shelf {
  id     String  @id @default(cuid()) @map("_id")
  status String?
  bookId String
  userId String

  book BookInfo @relation(fields: [bookId], references: [id])
  user User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model BookUser {
//   id             String   @id @default(cuid()) @map("_id")
//   userId         String
//   bookId         String
//   status         String // To categorize the interaction (e.g., "reading", "completed")
//   chapterId      String // The current or last chapter the user interacted with
//   byteId         String? // Optional, to reference a specific byte the user interacted with
//   audioTimeStamp Float? // Optional, in case of audio content, to save the last listened position
//   notes          String? // Optional, for user to take notes related to the book or chapter
//   rating         Int? // Optional, allowing users to rate the book
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @updatedAt

//   // Relations
//   user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   book    BookInfo @relation(fields: [bookId], references: [id], onDelete: Cascade)
//   chapter Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
//   byte    Byte?    @relation(fields: [byteId], references: [id], onDelete: SetNull) // Adjust onDelete behavior as needed

//   @@unique([userId, bookId])
// }

model BookUser {
  id                    String   @id @default(cuid()) @map("_id")
  userId                String
  bookId                String
  status                String // To categorize the interaction (e.g., "reading", "completed")
  chapterId             String? // Optional, the current or last chapter the user interacted with
  byteId                String? // Optional, to reference a specific byte (summary) the user interacted with
  audioTimeStampChapter Float? // Optional, in case of audio content, to save the last listened position
  audioTimeStampBytes   Float? // Optional, in case of audio content, to save the last listened position
  notes                 String? // Optional, for user to take notes related to the book or chapter/byte
  rating                Int? // Optional, allowing users to rate the book
  isBookmarked          Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book    BookInfo @relation(fields: [bookId], references: [id], onDelete: Cascade)
  chapter Chapter? @relation(fields: [chapterId], references: [id], onDelete: SetNull)
  byte    Byte?    @relation(fields: [byteId], references: [id], onDelete: SetNull)

  @@unique([userId, bookId])
}

model Highlights {
  id         String   @id @default(cuid()) @map("_id")
  userId     String
  bookId     String
  chapterId  String? // Optional, the current or last chapter the user interacted with
  byteId     String? // Optional, to reference a specific byte (summary) the user interacted with
  startIndex Int
  endIndex   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book    BookInfo @relation(fields: [bookId], references: [id], onDelete: Cascade)
  chapter Chapter? @relation(fields: [chapterId], references: [id], onDelete: SetNull)
  byte    Byte?    @relation(fields: [byteId], references: [id], onDelete: SetNull)

  @@unique([userId, bookId])
}

model UserLogin {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  loginDate DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, loginDate])
}
